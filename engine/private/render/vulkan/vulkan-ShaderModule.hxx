////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file vulkan-ShaderModule.hxx
/// @copyright GNU Public License
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#if R3_VULKAN

#include "vulkan-fwd.hxx"
#include "vulkan-VulkanObject.hxx"
#include <api/Construct.hpp>
#include <api/Result.hpp>
#include <vulkan/vulkan.h>

namespace R3::vulkan {

/// @brief Vulkan ShaderModule Specification.
struct ShaderModuleSpecification {
    const LogicalDevice& device; ///< Valid LogicalDevice.
    const char* path;            ///< Path to SPIRV shader code.
    VkShaderStageFlagBits stage; ///< Shader stage flags.
};

/// @brief Vulkan ShaderModule RAII wrapper.
/// Uses SPIRV compiled shader code (generated by build system).
/// https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkShaderModule.html
class ShaderModule : public VulkanObject<VkShaderModule> {
public:
    DEFAULT_CONSTRUCT(ShaderModule);
    NO_COPY(ShaderModule);
    DEFAULT_MOVE(ShaderModule);

    /// @brief Construct ShaderModule from imported SPIRV file.
    /// @param spec
    /// @return ShaderModule | InvalidFilepath | InitializationFailure
    static Result<ShaderModule> create(const ShaderModuleSpecification& spec);

    /// @brief Destroy ShaderModule.
    ~ShaderModule();

    /// @return Shader stage flags
    constexpr VkShaderStageFlagBits stage() const { return m_stage; }

private:
    VkDevice m_device             = VK_NULL_HANDLE;
    VkShaderStageFlagBits m_stage = {};
};

} // namespace R3::vulkan

#endif // R3_VULKAN
