/**
 * @file vulkan-ShaderModule.hxx
 * @copyright GNU Public License
 */

#pragma once

#if R3_VULKAN

#include "vulkan-fwd.hxx"
#include "vulkan-VulkanObject.hxx"
#include <api/Construct.hpp>
#include <vulkan/vulkan.h>

namespace R3::vulkan {

/**
 * Vulkan ShaderModule Specification.
 */
struct ShaderModuleSpecification {
    const LogicalDevice& device; /**< Valid LogicalDevice. */
    const char* path;            /**< Path to SPIRV shader code. */
    VkShaderStageFlagBits stage; /**< Shader stage flags. */
};

/**
 * Vulkan ShaderModule RAII wrapper.
 * Uses SPIRV compiled shader code (generated by build system).
 */
class ShaderModule : public VulkanObject<VkShaderModule> {
public:
    DEFAULT_CONSTRUCT(ShaderModule);
    NO_COPY(ShaderModule);
    DEFAULT_MOVE(ShaderModule);

    /**
     * Construct ShaderModule from imported SPIRV file.
     * @param spec
     */
    ShaderModule(const ShaderModuleSpecification& spec);

    /**
     * Destroy ShaderModule.
     */
    ~ShaderModule();

    /**
     * @return Shader stage flags
     */
    constexpr VkShaderStageFlagBits stage() const { return m_stage; }

private:
    VkDevice m_device             = VK_NULL_HANDLE;
    VkShaderStageFlagBits m_stage = {};
};

} // namespace R3::vulkan

#endif // R3_VULKAN
