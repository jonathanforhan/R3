cmake_minimum_required(VERSION 3.20)
project(R3_ENGINE LANGUAGES CXX C)

set(CMAKE_C_STANDARD 17)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

#[[ R3 SOURCES / HEADERS ]]
file(GLOB_RECURSE H_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/public/*.h")
file(GLOB_RECURSE HXX_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/public/*.hpp")
list(APPEND R3_ENGINE_HEADERS ${H_HEADERS} ${HXX_HEADERS})
set(R3_ENGINE_INCLUDES ${R3_ENGINE_HEADERS} PARENT_SCOPE)

file(GLOB_RECURSE C_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/public/*.c")
file(GLOB_RECURSE C_SOURCES_PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/private/*.c")
file(GLOB_RECURSE CXX_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/public/*.cpp")
file(GLOB_RECURSE CXX_SOURCES_PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/private/*.cxx")
list(APPEND R3_ENGINE_SOURCES ${C_SOURCES} ${CXX_SOURCES} ${C_SOURCES_PRIVATE} ${CXX_SOURCES_PRIVATE})

#[[ R3 ENGINE ]]
add_library(R3_ENGINE STATIC ${R3_ENGINE_SOURCES})
if (MSVC)
    set_target_properties(R3_ENGINE PROPERTIES COMPILE_FLAGS  "${CMAKE_CXX_FLAGS} /W4")
else ()
    set_target_properties(R3_ENGINE PROPERTIES COMPILE_FLAGS  "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Werror")
endif ()

target_include_directories(R3_ENGINE PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/public")
target_include_directories(R3_ENGINE PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/private")

#[[ R3 EXTERNAL DEPENDECIES ]]
add_subdirectory(extern)

target_link_libraries(R3_ENGINE PUBLIC ${R3_EXTERN_LIBS})
target_link_libraries(R3_ENGINE PRIVATE ${R3_EXTERN_LIBS_PRIVATE})

target_include_directories(R3_ENGINE PUBLIC "${R3_EXTERN_INCLUDE_DIRS}")
target_include_directories(R3_ENGINE PRIVATE "${R3_EXTERN_INCLUDE_DIRS_PRIVATE}")

#[[ R3 DEFINES ]]
target_compile_definitions(R3_ENGINE PUBLIC
    -DR3_OPENGL=1

    -DR3_BUILD_DEBUG=1
    -DR3_BUILD_RELEASE=0
    -DR3_BUILD_DIST=0

    -DR3_LOGGING_ENABLED=1
    -DR3_LOG_VERBOSE=1
    -DR3_LOG_INFO=1
    -DR3_LOG_WARNING=1
    -DR3_LOG_ERROR=1

    # -DGLM_FORCE_DEPTH_ZERO_TO_ONE=1
    -DGLFW_INCLUDE_NONE=1
    -DENTT_NOEXCEPTION=0
    )

if (WIN32)
    target_compile_definitions(R3_ENGINE PUBLIC -DGLFW_EXPOSE_NATIVE_WIN32=1)
else ()
    target_compile_definitions(R3_ENGINE PUBLIC -DGLFW_EXPOSE_NATIVE_X11=1)
endif ()

#[[ DOCUMENTATION ]]
find_package(Doxygen)

if (DOXYGEN_FOUND)
add_custom_target(R3_DOCS
    COMMAND ${DOXYGEN_EXECUTABLE} "${R3_SOURCE_DIR}/Doxyfile"
    WORKING_DIRECTORY ${R3_SOURCE_DIR}
    COMMENT "Generating R3 Documentation with Doxygen"
    OUTPUT_QUIET
)
add_dependencies(R3_ENGINE R3_DOCS)
endif ()
